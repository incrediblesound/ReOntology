/*! Ontology - v0.0.2 - */
function connect(){return r.connect({host:"localhost",port:28015,db:"test"})}function convert(a){return void 0!==a.features?convertType(a):void 0!==a.description?convertInstance(a):!1}function convertType(a){return{name:a.name,size:a.size,parent:"string"==typeof a.parent?"":a.parent.name,subTypeArray:a.subTypeArray,features:a.features}}function convertInstance(a){return{name:a.name,parent:a.parent.name,description:a.description}}var Instance=function(a){this.name=a.name,this.parent=void 0,this.description=a.description};Instance.prototype.getItem=function(a,b){this.name===a&&b(this)};var Tree=function(a){this.value=a,this.children=[]};Tree.prototype.insert=function(a){this.children.push(a)};var Search=function(a){this.root=a.root,this.related=a.related||null,this.subType=a.subType||null};Search.prototype.relatedTo=function(a){return new Search({root:this.root,related:a})},Search.prototype.hasType=function(a){return new Search({root:this.root,subType:a,related:this.related||null})},Search.prototype.hasAttributes=function(a,b){this.resolve(function(c){c.root.getByAttributes(a,b)})},Search.prototype.resolve=function(a){var b=this;null!==this.related&&"string"==typeof this.related?this.root.getItem(this.related,function(c){return b.related=c,b.resolve(a)}):null!==this.subType?this.root.getItem(this.subType,function(c){return b.subType=null,b.root=c,a(b)}):a(this)},Search.prototype.sharesAttributes=function(a,b){this.resolve(function(c){if(!c.related)throw new Error("The method sharesAttributes must follow a relatedTo method");var d={};_.each(a,function(a){d[a]=c.related.description[a]}),c.root.getByAttributes(d,b)})};var _=require("lodash"),r=require("rethinkdb"),Type=function(a){this.name=a.name,this.parent="",this.size=0,this.subTypeMap={},this.subTypeArray=[],this.features=a.features||void 0};Type.prototype.addSubType=function(a){this.size++;var b=new Type(a);return b.parent=this,this.subTypeMap[a.name]=b,this.subTypeArray.push(a.name),b},Type.prototype.addInstance=function(a){this.size++;var b=new Instance(a);b.parent=this,this.subTypeMap[a.name]=b,this.subTypeArray.push(a.name)},Type.prototype.viewInstance=function(a){function b(a,b){for(var c=a,d=0;d<b.length;d++)c=c.subTypeMap[b[d]];return c}function c(a,b,d){var f;if(a.name===d)return void(e=!0);if(a.subTypeArray&&a.subTypeArray.length)return _.each(a.subTypeArray,function(g){e||(f=a.subTypeMap[g],b.push(f.name),c(f,b,d,e),e||b.pop())}),b}var d=[],e=!1;d=c(this,d,a);var f=b(this,d);f=convert(f);for(var g=f;d.length;)d.pop(),g.parent=convert(b(this,d)),g=g.parent;return f},Type.prototype.getItem=function(a,b){var c=this;this.name===a?b(this):_.each(this.subTypeArray,function(d){c.subTypeMap[d].getItem(a,b)})},Type.prototype.typeTree=function(a){var b,a=a||new Tree(this.name),c=this;return _.each(this.subTypeArray,function(d){d=c.subTypeMap[d],b=new Tree(d.name),d instanceof Type&&(b=d.typeTree(b)),a.insert(b)}),a},Type.prototype.createTable=function(a){return this.table=a,connect().then(function(b){return r.tableCreate(a,{primaryKey:"name"}).run(b)})},Type.prototype.save=function(a){function b(a,b,c){var d;a instanceof Type?(d=convertType(a),console.log(d),r.table(c).insert(d).run(b)):(d=convertInstance(a),r.table(c).insert(d).run(b))}var a,c=this;void 0!==this.table&&(a=this.table),connect().then(function(d){b(c,d,a),_.each(c.subTypeArray,function(e){e=c.subTypeMap[e],e instanceof Type?e.save(a):b(e,d,a)})})},Type.prototype.getByAttributes=function(a,b){var c,d=this.flatten(),e=[],f=Object.keys(a);_.each(d,function(b){c=!0,_.each(f,function(d){c=c&&b.description[d]===a[d]}),c&&e.push(b)}),b(e)},Type.prototype.flatten=function(){var a,b=[],c=this;return _.each(this.subTypeArray,function(d){a=c.subTypeMap[d],void 0!==a.description?b.push(a):b=b.concat(a.flatten())}),b},Type.prototype.find=function(){return new Search({root:this})},module.exports={Type:Type,Instance:Instance};